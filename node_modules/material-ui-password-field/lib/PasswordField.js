'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _IconButton = require('material-ui/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _visibility = require('material-ui/svg-icons/action/visibility');

var _visibility2 = _interopRequireDefault(_visibility);

var _visibilityOff = require('material-ui/svg-icons/action/visibility-off');

var _visibilityOff2 = _interopRequireDefault(_visibilityOff);

var _transitions = require('material-ui/styles/transitions');

var _transitions2 = _interopRequireDefault(_transitions);

var _colorManipulator = require('material-ui/utils/colorManipulator');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var getStyles = function getStyles(props, context, state) {
  var _context$muiTheme = context.muiTheme,
      baseTheme = _context$muiTheme.baseTheme,
      _context$muiTheme$tex = _context$muiTheme.textField,
      floatingLabelColor = _context$muiTheme$tex.floatingLabelColor,
      focusColor = _context$muiTheme$tex.focusColor,
      textColor = _context$muiTheme$tex.textColor,
      disabledTextColor = _context$muiTheme$tex.disabledTextColor,
      backgroundColor = _context$muiTheme$tex.backgroundColor,
      hintColor = _context$muiTheme$tex.hintColor,
      errorColor = _context$muiTheme$tex.errorColor;

  var styles = {
    root: {
      display: 'flex',
      width: props.fullWidth ? '100%' : null
    },
    inputContainer: {
      flex: 1
    },
    input: {
      width: '100%',
      paddingRight: 56
    },
    hint: {
      position: 'relative',
      bottom: 2,
      fontSize: 12,
      lineHeight: '12px',
      color: props.errorText ? errorColor : (0, _colorManipulator.fade)(disabledTextColor, 0.5),
      transition: _transitions2.default.easeOut()
    },
    error: {
      color: errorColor
    },
    visibilityButton: {
      margin: '22px 0 0 8px',
      width: 48,
      height: 48,
      padding: 12
    },
    visibilityIcon: {
      opacity: !props.disabled && state.focused ? 0.54 : 0.38,
      width: 24,
      height: 24
    }
  };

  return styles;
};

var PasswordField = (function (_React$Component) {
  _inherits(PasswordField, _React$Component);

  function PasswordField(props) {
    _classCallCheck(this, PasswordField);

    var _this = _possibleConstructorReturn(this, (PasswordField.__proto__ || Object.getPrototypeOf(PasswordField)).call(this, props));

    _this.state = {
      focused: false,
      visible: props.visible
    };
    return _this;
  }

  _createClass(PasswordField, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.visible !== this.props.visible) {
        this.setState({
          visible: nextProps.visible
        });
      }
    }
  }, {
    key: 'toggleVisibility',
    value: function toggleVisibility() {
      this.setState({
        visible: !this.state.visible
      });
    }
  }, {
    key: 'handleInputFocus',
    value: function handleInputFocus(event) {
      this.setState({ focused: true });
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }
  }, {
    key: 'handleInputBlur',
    value: function handleInputBlur(event) {
      this.setState({ focused: false });
      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          hintText = _props.hintText,
          errorText = _props.errorText,
          errorStyle = _props.errorStyle,
          textFieldStyle = _props.textFieldStyle,
          style = _props.style,
          type = _props.type,
          fullWidth = _props.fullWidth,
          other = _objectWithoutProperties(_props, ['hintText', 'errorText', 'errorStyle', 'textFieldStyle', 'style', 'type', 'fullWidth']);

      var visible = this.state.visible;

      var styles = getStyles(this.props, this.context, this.state);

      var prepareStyles = this.context.muiTheme.prepareStyles;

      var actualErrorText = errorText ? errorText : hintText;

      return _react2.default.createElement(
        'div',
        { style: _extends({}, styles.root, style) },
        _react2.default.createElement(
          'div',
          { style: styles.inputContainer },
          _react2.default.createElement(_TextField2.default, _extends({}, other, {
            errorStyle: _extends({}, styles.error, errorStyle),
            errorText: errorText,
            hintText: null,
            style: _extends({}, styles.input, textFieldStyle),
            type: visible ? 'text' : 'password',
            onFocus: function onFocus(event) {
              return _this2.handleInputFocus(event);
            },
            onBlur: function onBlur(event) {
              return _this2.handleInputBlur(event);
            }
          })),
          hintText && !errorText ? _react2.default.createElement(
            'div',
            { style: prepareStyles(styles.hint) },
            actualErrorText
          ) : null
        ),
        _react2.default.createElement(
          _IconButton2.default,
          {
            onTouchTap: function onTouchTap() {
              return _this2.toggleVisibility();
            },
            iconStyle: styles.visibilityIcon,
            style: styles.visibilityButton,
            disabled: other.disabled
          },
          visible ? _react2.default.createElement(_visibility2.default, null) : _react2.default.createElement(_visibilityOff2.default, null)
        )
      );
    }
  }]);

  return PasswordField;
})(_react2.default.Component);

PasswordField.contextTypes = {
  muiTheme: _react.PropTypes.object.isRequired
};

if (process.env.NODE_ENV !== 'production') {
  PasswordField.propTypes = _extends({}, _TextField2.default.propTypes, {
    visible: _react.PropTypes.bool,
    textFieldStyle: _react.PropTypes.object
  });
  delete PasswordField.propTypes.multiLine;
  delete PasswordField.propTypes.type;
}

exports.default = PasswordField;