'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMotion = require('react-motion');

var _reactHeight = require('react-height');

var _reactHeight2 = _interopRequireDefault(_reactHeight);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PRECISION = 0.5;

var stringHeight = function stringHeight(height) {
  return Math.max(0, parseFloat(height)).toFixed(1);
};

var Collapse = function (_React$Component) {
  _inherits(Collapse, _React$Component);

  function Collapse(props) {
    _classCallCheck(this, Collapse);

    var _this = _possibleConstructorReturn(this, (Collapse.__proto__ || Object.getPrototypeOf(Collapse)).call(this, props));

    _this.onHeightReady = function (height) {
      var _this$props = _this.props,
          isOpened = _this$props.isOpened,
          onHeightReady = _this$props.onHeightReady;


      if (_this.renderStatic && isOpened) {
        _this.height = stringHeight(height);
      }

      _this.setState({ height: isOpened || !_this.renderStatic ? height : 0 });

      var reportHeight = isOpened ? height : 0;

      if (_this.state.height !== reportHeight) {
        onHeightReady(reportHeight);
      }
    };

    _this.state = { height: -1, isOpenedChanged: false };
    return _this;
  }

  _createClass(Collapse, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.height = stringHeight(0);
      this.renderStatic = true;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref) {
      var isOpened = _ref.isOpened;

      this.setState({ isOpenedChanged: isOpened !== this.props.isOpened });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(_ref2) {
      var isOpened = _ref2.isOpened;

      if (isOpened !== this.props.isOpened) {
        var report = this.props.isOpened ? this.state.height : 0;

        this.props.onHeightReady(report);
      }
    }
  }, {
    key: 'getMotionHeight',
    value: function getMotionHeight(height) {
      var _props = this.props,
          isOpened = _props.isOpened,
          springConfig = _props.springConfig,
          fixedHeight = _props.fixedHeight;
      var isOpenedChanged = this.state.isOpenedChanged;


      var newHeight = isOpened ? Math.max(0, parseFloat(height)).toFixed(1) : stringHeight(0);

      // No need to animate if content is closed and it was closed previously
      // Also no need to animate if height did not change
      var skipAnimation = !isOpenedChanged && !isOpened || this.height === newHeight && fixedHeight === -1;

      var springHeight = (0, _reactMotion.spring)(isOpened ? Math.max(0, height) : 0, _extends({
        precision: PRECISION
      }, springConfig));
      var instantHeight = isOpened ? Math.max(0, height) : 0;

      return skipAnimation ? instantHeight : springHeight;
    }
  }, {
    key: 'renderFixed',
    value: function renderFixed() {
      var _this2 = this;

      var _props2 = this.props,
          _springConfig = _props2.springConfig,
          _onHeightReady = _props2.onHeightReady,
          _onRest = _props2.onRest,
          isOpened = _props2.isOpened,
          style = _props2.style,
          children = _props2.children,
          fixedHeight = _props2.fixedHeight,
          keepCollapsedContent = _props2.keepCollapsedContent,
          props = _objectWithoutProperties(_props2, ['springConfig', 'onHeightReady', 'onRest', 'isOpened', 'style', 'children', 'fixedHeight', 'keepCollapsedContent']);

      if (this.renderStatic) {
        this.renderStatic = false;
        var newStyle = { overflow: 'hidden', height: isOpened ? fixedHeight : 0 };

        if (!keepCollapsedContent && !isOpened) {
          return null;
        }
        this.height = stringHeight(fixedHeight);
        return _react2.default.createElement(
          'div',
          _extends({ style: _extends({}, newStyle, style) }, props),
          children
        );
      }

      return _react2.default.createElement(
        _reactMotion.Motion,
        {
          defaultStyle: { height: isOpened ? 0 : fixedHeight },
          style: { height: this.getMotionHeight(fixedHeight) } },
        function (_ref3) {
          var height = _ref3.height;

          _this2.height = stringHeight(height);

          // TODO: this should be done using onEnd from ReactMotion, which is not yet implemented
          // See https://github.com/chenglou/react-motion/issues/235
          if (!keepCollapsedContent && !isOpened && _this2.height === stringHeight(0)) {
            return null;
          }

          var newStyle = { overflow: 'hidden', height: height };

          return _react2.default.createElement(
            'div',
            _extends({ style: _extends({}, newStyle, style) }, props),
            children
          );
        }
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props3 = this.props,
          _springConfig = _props3.springConfig,
          _onHeightReady = _props3.onHeightReady,
          isOpened = _props3.isOpened,
          style = _props3.style,
          children = _props3.children,
          fixedHeight = _props3.fixedHeight,
          keepCollapsedContent = _props3.keepCollapsedContent,
          onRest = _props3.onRest,
          props = _objectWithoutProperties(_props3, ['springConfig', 'onHeightReady', 'isOpened', 'style', 'children', 'fixedHeight', 'keepCollapsedContent', 'onRest']);

      if (fixedHeight > -1) {
        return this.renderFixed();
      }

      var renderStatic = this.renderStatic;
      var height = this.state.height;

      var currentStringHeight = parseFloat(height).toFixed(1);

      if (height > -1 && renderStatic) {
        this.renderStatic = false;
      }

      // Cache Content so it is not re-rendered on each animation step
      var content = _react2.default.createElement(
        _reactHeight2.default,
        { onHeightReady: this.onHeightReady },
        children
      );

      if (renderStatic) {
        var newStyle = isOpened ? { height: 'auto' } : { overflow: 'hidden', height: 0 };

        if (!isOpened && height > -1) {
          if (!keepCollapsedContent) {
            return null;
          }

          return _react2.default.createElement(
            'div',
            _extends({ style: _extends({ height: 0, overflow: 'hidden' }, style) }, props),
            content
          );
        }

        // <Motion> to prevent loosing input after causing this component to rerender
        return _react2.default.createElement(
          _reactMotion.Motion,
          {
            defaultStyle: { height: Math.max(0, height) },
            style: { height: Math.max(0, height) },
            onRest: onRest },
          function () {
            return _react2.default.createElement(
              'div',
              _extends({ style: _extends({}, newStyle, style) }, props),
              content
            );
          }
        );
      }

      return _react2.default.createElement(
        _reactMotion.Motion,
        {
          defaultStyle: { height: Math.max(0, height) },
          onRest: onRest,
          style: { height: this.getMotionHeight(height) } },
        function (st) {
          _this3.height = stringHeight(st.height);

          // TODO: this should be done using onEnd from ReactMotion, which is not yet implemented
          // See https://github.com/chenglou/react-motion/issues/235
          if (!isOpened && _this3.height === '0.0') {
            if (!keepCollapsedContent) {
              return null;
            }
            return _react2.default.createElement(
              'div',
              _extends({ style: _extends({ height: 0, overflow: 'hidden' }, style) }, props),
              content
            );
          }

          var newStyle = isOpened && _this3.height === currentStringHeight ? { height: 'auto' } : {
            height: st.height, overflow: 'hidden'
          };

          return _react2.default.createElement(
            'div',
            _extends({ style: _extends({}, newStyle, style) }, props),
            content
          );
        }
      );
    }
  }]);

  return Collapse;
}(_react2.default.Component);

Collapse.defaultProps = {
  fixedHeight: -1,
  style: {},
  keepCollapsedContent: false,
  onHeightReady: function onHeightReady() {} // eslint-disable-line no-empty-function
};
exports.default = Collapse;
//# sourceMappingURL=Collapse.js.map