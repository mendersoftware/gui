{"version":3,"sources":["../src/Component.js"],"names":["CopyToClipboard","propTypes","text","string","isRequired","children","element","onCopy","func","options","shape","debug","bool","message","onClick","event","props","elem","Children","only","result","render","_text","_onCopy","_options","cloneElement"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAGO,IAAMA,4CAAkB,gCAAiB;AAC9CC,aAAW;AACTC,UAAM,oBAAUC,MAAV,CAAiBC,UADd;AAETC,cAAU,oBAAUC,OAAV,CAAkBF,UAFnB;AAGTG,YAAQ,oBAAUC,IAHT;AAITC,aAAS,oBAAUC,KAAV,CAAgB;AACvBC,aAAO,oBAAUC,IADM;AAEvBC,eAAS,oBAAUV;AAFI,KAAhB;AAJA,GADmC;;AAY9CW,SAZ8C,mBAYtCC,KAZsC,EAY/B;AAAA,iBAMT,KAAKC,KANI;AAAA,QAEXd,IAFW,UAEXA,IAFW;AAAA,QAGXK,MAHW,UAGXA,MAHW;AAAA,QAIXF,QAJW,UAIXA,QAJW;AAAA,QAKXI,OALW,UAKXA,OALW;;;AAQb,QAAMQ,OAAO,gBAAMC,QAAN,CAAeC,IAAf,CAAoBd,QAApB,CAAb;;AAEA,QAAMe,SAAS,+BAAKlB,IAAL,EAAWO,OAAX,CAAf;;AAEA,QAAIF,MAAJ,EAAY;AACVA,aAAOL,IAAP,EAAakB,MAAb;AACD;;AAED;AACA,QAAIH,QAAQA,KAAKD,KAAb,IAAsB,OAAOC,KAAKD,KAAL,CAAWF,OAAlB,KAA8B,UAAxD,EAAoE;AAClEG,WAAKD,KAAL,CAAWF,OAAX,CAAmBC,KAAnB;AACD;AACF,GAhC6C;AAmC9CM,QAnC8C,oBAmCrC;AAAA,kBAOH,KAAKL,KAPF;AAAA,QAECM,KAFD,WAELpB,IAFK;AAAA,QAGGqB,OAHH,WAGLhB,MAHK;AAAA,QAIIiB,QAJJ,WAILf,OAJK;AAAA,QAKLJ,QALK,WAKLA,QALK;AAAA,QAMFW,KANE;;AAQP,QAAMC,OAAO,gBAAMC,QAAN,CAAeC,IAAf,CAAoBd,QAApB,CAAb;;AAEA,WAAO,gBAAMoB,YAAN,CAAmBR,IAAnB,eAA6BD,KAA7B,IAAoCF,SAAS,KAAKA,OAAlD,IAAP;AACD;AA9C6C,CAAjB,CAAxB","file":"Component.js","sourcesContent":["import React from 'react';\nimport createReactClass from 'create-react-class';\nimport PropTypes from 'prop-types';\nimport copy from 'copy-to-clipboard';\n\n\nexport const CopyToClipboard = createReactClass({\n  propTypes: {\n    text: PropTypes.string.isRequired,\n    children: PropTypes.element.isRequired,\n    onCopy: PropTypes.func,\n    options: PropTypes.shape({\n      debug: PropTypes.bool,\n      message: PropTypes.string\n    })\n  },\n\n\n  onClick(event) {\n    const {\n      text,\n      onCopy,\n      children,\n      options\n    } = this.props;\n\n    const elem = React.Children.only(children);\n\n    const result = copy(text, options);\n\n    if (onCopy) {\n      onCopy(text, result);\n    }\n\n    // Bypass onClick if it was present\n    if (elem && elem.props && typeof elem.props.onClick === 'function') {\n      elem.props.onClick(event);\n    }\n  },\n\n\n  render() {\n    const {\n      text: _text,\n      onCopy: _onCopy,\n      options: _options,\n      children,\n      ...props\n    } = this.props;\n    const elem = React.Children.only(children);\n\n    return React.cloneElement(elem, {...props, onClick: this.onClick});\n  }\n});\n"]}