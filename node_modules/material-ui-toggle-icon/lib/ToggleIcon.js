'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = ToggleIcon;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var clipPath = function clipPath(value) {
  return {
    WebkitClipPath: value,
    clipPath: value
  };
};

var getStyles = function getStyles(props) {
  return {
    root: {
      width: 24,
      height: 24,
      position: 'relative',
      display: 'inline-block'
    },
    offIcon: _extends({
      transition: 'clip-path 550ms cubic-bezier(0.4, 0.0, 0.2, 1), -webkit-clip-path 550ms cubic-bezier(0.4, 0.0, 0.2, 1)'
    }, clipPath(props.on ? 'polygon(0% 0%, 0% 0%, 0% 0%)' : 'polygon(0% 200%, 0% 0%, 200% 0%)'), {
      visibility: !props.on || (0, _util.clipPathSupported)() ? 'visible' : 'hidden',
      width: '100%',
      height: '100%',
      position: 'absolute',
      left: 0,
      top: 0
    }),
    onIcon: _extends({
      transition: 'clip-path 550ms cubic-bezier(0.4, 0.0, 0.2, 1), -webkit-clip-path 550ms cubic-bezier(0.4, 0.0, 0.2, 1)'
    }, clipPath(props.on ? 'polygon(100% -100%, 100% 100%, -100% 100%)' : 'polygon(100% 100%, 100% 100%, 100% 100%)'), {
      visibility: props.on || (0, _util.clipPathSupported)() ? 'visible' : 'hidden',
      width: '100%',
      height: '100%',
      position: 'absolute',
      left: 0,
      top: 0
    })
  };
};

/**
 * An animated toggle icon.
 */
function ToggleIcon(props) {
  var color = props.color,
      hoverColor = props.hoverColor,
      offIcon = props.offIcon,
      onIcon = props.onIcon,
      on = props.on,
      style = props.style,
      other = _objectWithoutProperties(props, ['color', 'hoverColor', 'offIcon', 'onIcon', 'on', 'style']);

  var styles = getStyles(props);

  return _react2.default.createElement(
    'div',
    _extends({ style: _extends({}, styles.root, style) }, other),
    _react2.default.cloneElement(offIcon, {
      style: _extends({}, style, styles.offIcon),
      color: color,
      hoverColor: hoverColor
    }),
    _react2.default.cloneElement(onIcon, {
      style: _extends({}, style, styles.onIcon, style),
      color: color,
      hoverColor: hoverColor
    })
  );
}

ToggleIcon.propTypes = {
  /**
   * This is the fill color of the svg icon. If not specified, this component will default to muiTheme.palette.textColor.
   */
  color: _propTypes2.default.string,
  /**
   * This is the icon color when the mouse hovers over the icon.
   */
  hoverColor: _propTypes2.default.string,
  /**
   * The icon to be displayed if the `on` prop is set to `false`.
   */
  offIcon: _propTypes2.default.element.isRequired,
  /**
   * The icon to be displayed if the `on` prop is set to `true`.
   */
  onIcon: _propTypes2.default.element.isRequired,
  /**
   * Controls whether the `onIcon` or the `offIcon` is displayed.
   */
  on: _propTypes2.default.bool.isRequired,
  /**
   * Override the inline-styles of the root element.
   */
  style: _propTypes2.default.object
};